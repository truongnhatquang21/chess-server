"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Chess__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "address",
                name: "player",
                type: "address",
            },
        ],
        name: "CancelDraw",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
        ],
        name: "GameCanceled",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "address",
                name: "winner",
                type: "address",
            },
        ],
        name: "GameCompleted",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "address",
                name: "player0",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "betAmount",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "keccakMessage",
                type: "bytes32",
            },
        ],
        name: "GameCreated",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
        ],
        name: "GameDraw",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "address",
                name: "firstPlayer",
                type: "address",
            },
        ],
        name: "GameStart",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "address",
                name: "player",
                type: "address",
            },
        ],
        name: "MessageRevealed",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "address",
                name: "player1",
                type: "address",
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "keccakMessage",
                type: "bytes32",
            },
        ],
        name: "PlayerJoined",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "address",
                name: "player",
                type: "address",
            },
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "gameID",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "board",
                        type: "uint256",
                    },
                    {
                        internalType: "int256",
                        name: "moveCount",
                        type: "int256",
                    },
                    {
                        internalType: "bytes",
                        name: "signature",
                        type: "bytes",
                    },
                ],
                indexed: false,
                internalType: "struct FunnyChess.GameState",
                name: "newState",
                type: "tuple",
            },
        ],
        name: "RefuteTimeOut",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "address",
                name: "player",
                type: "address",
            },
        ],
        name: "ReportDraw",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "address",
                name: "player",
                type: "address",
            },
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "gameID",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "board",
                        type: "uint256",
                    },
                    {
                        internalType: "int256",
                        name: "moveCount",
                        type: "int256",
                    },
                    {
                        internalType: "bytes",
                        name: "signature",
                        type: "bytes",
                    },
                ],
                indexed: false,
                internalType: "struct FunnyChess.GameState",
                name: "newState",
                type: "tuple",
            },
        ],
        name: "ReportTimeOut",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
        ],
        name: "cancelDraw",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
        ],
        name: "claimTimeOut",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "gameID",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "board",
                        type: "uint256",
                    },
                    {
                        internalType: "int256",
                        name: "moveCount",
                        type: "int256",
                    },
                    {
                        internalType: "bytes",
                        name: "signature",
                        type: "bytes",
                    },
                ],
                internalType: "struct FunnyChess.GameState",
                name: "oldState",
                type: "tuple",
            },
            {
                internalType: "uint8",
                name: "from",
                type: "uint8",
            },
            {
                internalType: "uint8",
                name: "to",
                type: "uint8",
            },
        ],
        name: "claimWin",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "keccakMessage",
                type: "bytes32",
            },
            {
                internalType: "uint256",
                name: "_turnTime",
                type: "uint256",
            },
        ],
        name: "createGame",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [],
        name: "gameCount",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        name: "games",
        outputs: [
            {
                internalType: "enum FunnyChess.Stage",
                name: "gameStage",
                type: "uint8",
            },
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "gameID",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "board",
                        type: "uint256",
                    },
                    {
                        internalType: "int256",
                        name: "moveCount",
                        type: "int256",
                    },
                    {
                        internalType: "bytes",
                        name: "signature",
                        type: "bytes",
                    },
                ],
                internalType: "struct FunnyChess.GameState",
                name: "latestState",
                type: "tuple",
            },
            {
                internalType: "int8",
                name: "firstPlayerIndex",
                type: "int8",
            },
            {
                internalType: "uint256",
                name: "betAmount",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "winner",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "revealEndTime",
                type: "uint256",
            },
            {
                internalType: "int8",
                name: "reportTimeOutPlayerIndex",
                type: "int8",
            },
            {
                internalType: "uint256",
                name: "reportTimeOutEndTime",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "turnTime",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "drawFlag",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
        ],
        name: "getGameInfo",
        outputs: [
            {
                components: [
                    {
                        internalType: "enum FunnyChess.Stage",
                        name: "gameStage",
                        type: "uint8",
                    },
                    {
                        internalType: "address[2]",
                        name: "players",
                        type: "address[2]",
                    },
                    {
                        components: [
                            {
                                internalType: "uint256",
                                name: "gameID",
                                type: "uint256",
                            },
                            {
                                internalType: "uint256",
                                name: "board",
                                type: "uint256",
                            },
                            {
                                internalType: "int256",
                                name: "moveCount",
                                type: "int256",
                            },
                            {
                                internalType: "bytes",
                                name: "signature",
                                type: "bytes",
                            },
                        ],
                        internalType: "struct FunnyChess.GameState",
                        name: "latestState",
                        type: "tuple",
                    },
                    {
                        internalType: "int8",
                        name: "firstPlayerIndex",
                        type: "int8",
                    },
                    {
                        internalType: "bytes32[2]",
                        name: "keccak256Message",
                        type: "bytes32[2]",
                    },
                    {
                        internalType: "int8[2]",
                        name: "decodedMessage",
                        type: "int8[2]",
                    },
                    {
                        internalType: "uint256",
                        name: "betAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "address",
                        name: "winner",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "revealEndTime",
                        type: "uint256",
                    },
                    {
                        internalType: "int8",
                        name: "reportTimeOutPlayerIndex",
                        type: "int8",
                    },
                    {
                        internalType: "uint256",
                        name: "reportTimeOutEndTime",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "turnTime",
                        type: "uint256",
                    },
                    {
                        internalType: "address",
                        name: "drawFlag",
                        type: "address",
                    },
                ],
                internalType: "struct FunnyChess.ChessGame",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "initGameState",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
            {
                internalType: "bytes32",
                name: "keccakMessage",
                type: "bytes32",
            },
        ],
        name: "joinGame",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [],
        name: "ping",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "gameID",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "board",
                        type: "uint256",
                    },
                    {
                        internalType: "int256",
                        name: "moveCount",
                        type: "int256",
                    },
                    {
                        internalType: "bytes",
                        name: "signature",
                        type: "bytes",
                    },
                ],
                internalType: "struct FunnyChess.GameState",
                name: "oldState",
                type: "tuple",
            },
            {
                internalType: "uint8",
                name: "from",
                type: "uint8",
            },
            {
                internalType: "uint8",
                name: "to",
                type: "uint8",
            },
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "gameID",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "board",
                        type: "uint256",
                    },
                    {
                        internalType: "int256",
                        name: "moveCount",
                        type: "int256",
                    },
                    {
                        internalType: "bytes",
                        name: "signature",
                        type: "bytes",
                    },
                ],
                internalType: "struct FunnyChess.GameState",
                name: "newState",
                type: "tuple",
            },
        ],
        name: "refuteTimeOut",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
        ],
        name: "reportDraw",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "gameID",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "board",
                        type: "uint256",
                    },
                    {
                        internalType: "int256",
                        name: "moveCount",
                        type: "int256",
                    },
                    {
                        internalType: "bytes",
                        name: "signature",
                        type: "bytes",
                    },
                ],
                internalType: "struct FunnyChess.GameState",
                name: "oldState",
                type: "tuple",
            },
            {
                internalType: "uint8",
                name: "from",
                type: "uint8",
            },
            {
                internalType: "uint8",
                name: "to",
                type: "uint8",
            },
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "gameID",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "board",
                        type: "uint256",
                    },
                    {
                        internalType: "int256",
                        name: "moveCount",
                        type: "int256",
                    },
                    {
                        internalType: "bytes",
                        name: "signature",
                        type: "bytes",
                    },
                ],
                internalType: "struct FunnyChess.GameState",
                name: "newState",
                type: "tuple",
            },
        ],
        name: "reportTimeOut",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
            {
                internalType: "string",
                name: "message",
                type: "string",
            },
        ],
        name: "revealMessage",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "gameID",
                type: "uint256",
            },
        ],
        name: "withdrawFromRevealingGame",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
class Chess__factory {
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.Chess__factory = Chess__factory;
Chess__factory.abi = _abi;
