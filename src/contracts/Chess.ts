/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace FunnyChess {
  export type GameStateStruct = {
    gameID: BigNumberish;
    board: BigNumberish;
    moveCount: BigNumberish;
    signature: BytesLike;
  };

  export type GameStateStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    gameID: BigNumber;
    board: BigNumber;
    moveCount: BigNumber;
    signature: string;
  };

  export type ChessGameStruct = {
    gameStage: BigNumberish;
    players: [string, string];
    latestState: FunnyChess.GameStateStruct;
    firstPlayerIndex: BigNumberish;
    keccak256Message: [BytesLike, BytesLike];
    decodedMessage: [BigNumberish, BigNumberish];
    betAmount: BigNumberish;
    winner: string;
    revealEndTime: BigNumberish;
    reportTimeOutPlayerIndex: BigNumberish;
    reportTimeOutEndTime: BigNumberish;
    turnTime: BigNumberish;
    drawFlag: string;
  };

  export type ChessGameStructOutput = [
    number,
    [string, string],
    FunnyChess.GameStateStructOutput,
    number,
    [string, string],
    [number, number],
    BigNumber,
    string,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    string
  ] & {
    gameStage: number;
    players: [string, string];
    latestState: FunnyChess.GameStateStructOutput;
    firstPlayerIndex: number;
    keccak256Message: [string, string];
    decodedMessage: [number, number];
    betAmount: BigNumber;
    winner: string;
    revealEndTime: BigNumber;
    reportTimeOutPlayerIndex: number;
    reportTimeOutEndTime: BigNumber;
    turnTime: BigNumber;
    drawFlag: string;
  };
}

export interface ChessInterface extends utils.Interface {
  functions: {
    "cancelDraw(uint256)": FunctionFragment;
    "claimTimeOut(uint256)": FunctionFragment;
    "claimWin(uint256,(uint256,uint256,int256,bytes),uint8,uint8)": FunctionFragment;
    "createGame(bytes32,uint256)": FunctionFragment;
    "gameCount()": FunctionFragment;
    "games(uint256)": FunctionFragment;
    "getGameInfo(uint256)": FunctionFragment;
    "initGameState()": FunctionFragment;
    "joinGame(uint256,bytes32)": FunctionFragment;
    "ping()": FunctionFragment;
    "refuteTimeOut(uint256,(uint256,uint256,int256,bytes),uint8,uint8,(uint256,uint256,int256,bytes))": FunctionFragment;
    "reportDraw(uint256)": FunctionFragment;
    "reportTimeOut(uint256,(uint256,uint256,int256,bytes),uint8,uint8,(uint256,uint256,int256,bytes))": FunctionFragment;
    "revealMessage(uint256,string)": FunctionFragment;
    "withdrawFromRevealingGame(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelDraw"
      | "claimTimeOut"
      | "claimWin"
      | "createGame"
      | "gameCount"
      | "games"
      | "getGameInfo"
      | "initGameState"
      | "joinGame"
      | "ping"
      | "refuteTimeOut"
      | "reportDraw"
      | "reportTimeOut"
      | "revealMessage"
      | "withdrawFromRevealingGame"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelDraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTimeOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWin",
    values: [
      BigNumberish,
      FunnyChess.GameStateStruct,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gameCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getGameInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initGameState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "ping", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refuteTimeOut",
    values: [
      BigNumberish,
      FunnyChess.GameStateStruct,
      BigNumberish,
      BigNumberish,
      FunnyChess.GameStateStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reportDraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reportTimeOut",
    values: [
      BigNumberish,
      FunnyChess.GameStateStruct,
      BigNumberish,
      BigNumberish,
      FunnyChess.GameStateStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revealMessage",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromRevealingGame",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "cancelDraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTimeOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimWin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initGameState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ping", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refuteTimeOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reportDraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportTimeOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromRevealingGame",
    data: BytesLike
  ): Result;

  events: {
    "CancelDraw(uint256,address)": EventFragment;
    "GameCanceled(uint256)": EventFragment;
    "GameCompleted(uint256,address)": EventFragment;
    "GameCreated(uint256,address,uint256,bytes32)": EventFragment;
    "GameDraw(uint256)": EventFragment;
    "GameStart(uint256,address)": EventFragment;
    "MessageRevealed(uint256,address)": EventFragment;
    "PlayerJoined(uint256,address,bytes32)": EventFragment;
    "RefuteTimeOut(uint256,address,(uint256,uint256,int256,bytes))": EventFragment;
    "ReportDraw(uint256,address)": EventFragment;
    "ReportTimeOut(uint256,address,(uint256,uint256,int256,bytes))": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelDraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameDraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageRevealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerJoined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefuteTimeOut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReportDraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReportTimeOut"): EventFragment;
}

export interface CancelDrawEventObject {
  gameID: BigNumber;
  player: string;
}
export type CancelDrawEvent = TypedEvent<
  [BigNumber, string],
  CancelDrawEventObject
>;

export type CancelDrawEventFilter = TypedEventFilter<CancelDrawEvent>;

export interface GameCanceledEventObject {
  gameID: BigNumber;
}
export type GameCanceledEvent = TypedEvent<
  [BigNumber],
  GameCanceledEventObject
>;

export type GameCanceledEventFilter = TypedEventFilter<GameCanceledEvent>;

export interface GameCompletedEventObject {
  gameID: BigNumber;
  winner: string;
}
export type GameCompletedEvent = TypedEvent<
  [BigNumber, string],
  GameCompletedEventObject
>;

export type GameCompletedEventFilter = TypedEventFilter<GameCompletedEvent>;

export interface GameCreatedEventObject {
  gameID: BigNumber;
  player0: string;
  betAmount: BigNumber;
  keccakMessage: string;
}
export type GameCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  GameCreatedEventObject
>;

export type GameCreatedEventFilter = TypedEventFilter<GameCreatedEvent>;

export interface GameDrawEventObject {
  gameID: BigNumber;
}
export type GameDrawEvent = TypedEvent<[BigNumber], GameDrawEventObject>;

export type GameDrawEventFilter = TypedEventFilter<GameDrawEvent>;

export interface GameStartEventObject {
  gameID: BigNumber;
  firstPlayer: string;
}
export type GameStartEvent = TypedEvent<
  [BigNumber, string],
  GameStartEventObject
>;

export type GameStartEventFilter = TypedEventFilter<GameStartEvent>;

export interface MessageRevealedEventObject {
  gameID: BigNumber;
  player: string;
}
export type MessageRevealedEvent = TypedEvent<
  [BigNumber, string],
  MessageRevealedEventObject
>;

export type MessageRevealedEventFilter = TypedEventFilter<MessageRevealedEvent>;

export interface PlayerJoinedEventObject {
  gameID: BigNumber;
  player1: string;
  keccakMessage: string;
}
export type PlayerJoinedEvent = TypedEvent<
  [BigNumber, string, string],
  PlayerJoinedEventObject
>;

export type PlayerJoinedEventFilter = TypedEventFilter<PlayerJoinedEvent>;

export interface RefuteTimeOutEventObject {
  gameID: BigNumber;
  player: string;
  newState: FunnyChess.GameStateStructOutput;
}
export type RefuteTimeOutEvent = TypedEvent<
  [BigNumber, string, FunnyChess.GameStateStructOutput],
  RefuteTimeOutEventObject
>;

export type RefuteTimeOutEventFilter = TypedEventFilter<RefuteTimeOutEvent>;

export interface ReportDrawEventObject {
  gameID: BigNumber;
  player: string;
}
export type ReportDrawEvent = TypedEvent<
  [BigNumber, string],
  ReportDrawEventObject
>;

export type ReportDrawEventFilter = TypedEventFilter<ReportDrawEvent>;

export interface ReportTimeOutEventObject {
  gameID: BigNumber;
  player: string;
  newState: FunnyChess.GameStateStructOutput;
}
export type ReportTimeOutEvent = TypedEvent<
  [BigNumber, string, FunnyChess.GameStateStructOutput],
  ReportTimeOutEventObject
>;

export type ReportTimeOutEventFilter = TypedEventFilter<ReportTimeOutEvent>;

export interface Chess extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelDraw(
      gameID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimTimeOut(
      gameID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimWin(
      gameID: BigNumberish,
      oldState: FunnyChess.GameStateStruct,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createGame(
      keccakMessage: BytesLike,
      _turnTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    gameCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    games(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        FunnyChess.GameStateStructOutput,
        number,
        BigNumber,
        string,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string
      ] & {
        gameStage: number;
        latestState: FunnyChess.GameStateStructOutput;
        firstPlayerIndex: number;
        betAmount: BigNumber;
        winner: string;
        revealEndTime: BigNumber;
        reportTimeOutPlayerIndex: number;
        reportTimeOutEndTime: BigNumber;
        turnTime: BigNumber;
        drawFlag: string;
      }
    >;

    getGameInfo(
      gameID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[FunnyChess.ChessGameStructOutput]>;

    initGameState(overrides?: CallOverrides): Promise<[BigNumber]>;

    joinGame(
      gameID: BigNumberish,
      keccakMessage: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    ping(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    refuteTimeOut(
      gameID: BigNumberish,
      oldState: FunnyChess.GameStateStruct,
      from: BigNumberish,
      to: BigNumberish,
      newState: FunnyChess.GameStateStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    reportDraw(
      gameID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    reportTimeOut(
      gameID: BigNumberish,
      oldState: FunnyChess.GameStateStruct,
      from: BigNumberish,
      to: BigNumberish,
      newState: FunnyChess.GameStateStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revealMessage(
      gameID: BigNumberish,
      message: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawFromRevealingGame(
      gameID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  cancelDraw(
    gameID: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimTimeOut(
    gameID: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimWin(
    gameID: BigNumberish,
    oldState: FunnyChess.GameStateStruct,
    from: BigNumberish,
    to: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createGame(
    keccakMessage: BytesLike,
    _turnTime: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  gameCount(overrides?: CallOverrides): Promise<BigNumber>;

  games(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      FunnyChess.GameStateStructOutput,
      number,
      BigNumber,
      string,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      string
    ] & {
      gameStage: number;
      latestState: FunnyChess.GameStateStructOutput;
      firstPlayerIndex: number;
      betAmount: BigNumber;
      winner: string;
      revealEndTime: BigNumber;
      reportTimeOutPlayerIndex: number;
      reportTimeOutEndTime: BigNumber;
      turnTime: BigNumber;
      drawFlag: string;
    }
  >;

  getGameInfo(
    gameID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<FunnyChess.ChessGameStructOutput>;

  initGameState(overrides?: CallOverrides): Promise<BigNumber>;

  joinGame(
    gameID: BigNumberish,
    keccakMessage: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  ping(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  refuteTimeOut(
    gameID: BigNumberish,
    oldState: FunnyChess.GameStateStruct,
    from: BigNumberish,
    to: BigNumberish,
    newState: FunnyChess.GameStateStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  reportDraw(
    gameID: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  reportTimeOut(
    gameID: BigNumberish,
    oldState: FunnyChess.GameStateStruct,
    from: BigNumberish,
    to: BigNumberish,
    newState: FunnyChess.GameStateStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revealMessage(
    gameID: BigNumberish,
    message: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawFromRevealingGame(
    gameID: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelDraw(gameID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claimTimeOut(
      gameID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimWin(
      gameID: BigNumberish,
      oldState: FunnyChess.GameStateStruct,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createGame(
      keccakMessage: BytesLike,
      _turnTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameCount(overrides?: CallOverrides): Promise<BigNumber>;

    games(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        FunnyChess.GameStateStructOutput,
        number,
        BigNumber,
        string,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string
      ] & {
        gameStage: number;
        latestState: FunnyChess.GameStateStructOutput;
        firstPlayerIndex: number;
        betAmount: BigNumber;
        winner: string;
        revealEndTime: BigNumber;
        reportTimeOutPlayerIndex: number;
        reportTimeOutEndTime: BigNumber;
        turnTime: BigNumber;
        drawFlag: string;
      }
    >;

    getGameInfo(
      gameID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<FunnyChess.ChessGameStructOutput>;

    initGameState(overrides?: CallOverrides): Promise<BigNumber>;

    joinGame(
      gameID: BigNumberish,
      keccakMessage: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    ping(overrides?: CallOverrides): Promise<void>;

    refuteTimeOut(
      gameID: BigNumberish,
      oldState: FunnyChess.GameStateStruct,
      from: BigNumberish,
      to: BigNumberish,
      newState: FunnyChess.GameStateStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    reportDraw(gameID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    reportTimeOut(
      gameID: BigNumberish,
      oldState: FunnyChess.GameStateStruct,
      from: BigNumberish,
      to: BigNumberish,
      newState: FunnyChess.GameStateStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    revealMessage(
      gameID: BigNumberish,
      message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromRevealingGame(
      gameID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CancelDraw(uint256,address)"(
      gameID?: null,
      player?: null
    ): CancelDrawEventFilter;
    CancelDraw(gameID?: null, player?: null): CancelDrawEventFilter;

    "GameCanceled(uint256)"(gameID?: null): GameCanceledEventFilter;
    GameCanceled(gameID?: null): GameCanceledEventFilter;

    "GameCompleted(uint256,address)"(
      gameID?: null,
      winner?: null
    ): GameCompletedEventFilter;
    GameCompleted(gameID?: null, winner?: null): GameCompletedEventFilter;

    "GameCreated(uint256,address,uint256,bytes32)"(
      gameID?: null,
      player0?: null,
      betAmount?: null,
      keccakMessage?: null
    ): GameCreatedEventFilter;
    GameCreated(
      gameID?: null,
      player0?: null,
      betAmount?: null,
      keccakMessage?: null
    ): GameCreatedEventFilter;

    "GameDraw(uint256)"(gameID?: null): GameDrawEventFilter;
    GameDraw(gameID?: null): GameDrawEventFilter;

    "GameStart(uint256,address)"(
      gameID?: null,
      firstPlayer?: null
    ): GameStartEventFilter;
    GameStart(gameID?: null, firstPlayer?: null): GameStartEventFilter;

    "MessageRevealed(uint256,address)"(
      gameID?: null,
      player?: null
    ): MessageRevealedEventFilter;
    MessageRevealed(gameID?: null, player?: null): MessageRevealedEventFilter;

    "PlayerJoined(uint256,address,bytes32)"(
      gameID?: null,
      player1?: null,
      keccakMessage?: null
    ): PlayerJoinedEventFilter;
    PlayerJoined(
      gameID?: null,
      player1?: null,
      keccakMessage?: null
    ): PlayerJoinedEventFilter;

    "RefuteTimeOut(uint256,address,(uint256,uint256,int256,bytes))"(
      gameID?: null,
      player?: null,
      newState?: null
    ): RefuteTimeOutEventFilter;
    RefuteTimeOut(
      gameID?: null,
      player?: null,
      newState?: null
    ): RefuteTimeOutEventFilter;

    "ReportDraw(uint256,address)"(
      gameID?: null,
      player?: null
    ): ReportDrawEventFilter;
    ReportDraw(gameID?: null, player?: null): ReportDrawEventFilter;

    "ReportTimeOut(uint256,address,(uint256,uint256,int256,bytes))"(
      gameID?: null,
      player?: null,
      newState?: null
    ): ReportTimeOutEventFilter;
    ReportTimeOut(
      gameID?: null,
      player?: null,
      newState?: null
    ): ReportTimeOutEventFilter;
  };

  estimateGas: {
    cancelDraw(
      gameID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimTimeOut(
      gameID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimWin(
      gameID: BigNumberish,
      oldState: FunnyChess.GameStateStruct,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createGame(
      keccakMessage: BytesLike,
      _turnTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    gameCount(overrides?: CallOverrides): Promise<BigNumber>;

    games(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getGameInfo(
      gameID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initGameState(overrides?: CallOverrides): Promise<BigNumber>;

    joinGame(
      gameID: BigNumberish,
      keccakMessage: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    ping(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    refuteTimeOut(
      gameID: BigNumberish,
      oldState: FunnyChess.GameStateStruct,
      from: BigNumberish,
      to: BigNumberish,
      newState: FunnyChess.GameStateStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    reportDraw(
      gameID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    reportTimeOut(
      gameID: BigNumberish,
      oldState: FunnyChess.GameStateStruct,
      from: BigNumberish,
      to: BigNumberish,
      newState: FunnyChess.GameStateStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revealMessage(
      gameID: BigNumberish,
      message: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawFromRevealingGame(
      gameID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelDraw(
      gameID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimTimeOut(
      gameID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimWin(
      gameID: BigNumberish,
      oldState: FunnyChess.GameStateStruct,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createGame(
      keccakMessage: BytesLike,
      _turnTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    gameCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    games(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameInfo(
      gameID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initGameState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joinGame(
      gameID: BigNumberish,
      keccakMessage: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ping(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    refuteTimeOut(
      gameID: BigNumberish,
      oldState: FunnyChess.GameStateStruct,
      from: BigNumberish,
      to: BigNumberish,
      newState: FunnyChess.GameStateStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    reportDraw(
      gameID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    reportTimeOut(
      gameID: BigNumberish,
      oldState: FunnyChess.GameStateStruct,
      from: BigNumberish,
      to: BigNumberish,
      newState: FunnyChess.GameStateStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revealMessage(
      gameID: BigNumberish,
      message: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawFromRevealingGame(
      gameID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
